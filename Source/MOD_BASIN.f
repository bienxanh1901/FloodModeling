      MODULE BASIN_MOD
      USE datetime_module
      USE GATE_MOD
      USE SUBBASIN_MOD
      USE REACH_MOD
      USE RESERVOIR_MOD
      USE SOURCE_MOD
      IMPLICIT NONE

      PUBLIC :: BASIN_TYPE

      TYPE BASIN_TYPE

        !basin name
        CHARACTER(100) :: NAME
        !max level of basin objects
        INTEGER :: MAX_LEVEL = 0
        !Number of objects
        INTEGER :: NSUBBASIN, NREACH, NRESERVOIR, NSOURCE, NPRECIP, NGATE
        !Object data
        TYPE(SUBBASIN_TYPE), POINTER, DIMENSION(:) :: SUBBASIN
        TYPE(REACH_TYPE), POINTER, DIMENSION(:) :: REACH
        TYPE(RESERVOIR_TYPE), POINTER, DIMENSION(:) :: RESERVOIR
        TYPE(SOURCE_TYPE), POINTER, DIMENSION(:) :: SOURCE
        TYPE(GATE_TYPE), POINTER, DIMENSION(:) :: GATE

        CONTAINS

        PROCEDURE,PASS(SEFT), PUBLIC :: SET_OBJECTS_LEVEL
        PROCEDURE,PASS(SEFT), PRIVATE :: FIND_LEVEL
        PROCEDURE,PASS(SEFT), PUBLIC :: BSALLOCATING
        PROCEDURE,PASS(SEFT), PUBLIC :: CALCULATING_RUNOFF
        PROCEDURE,PASS(SEFT), PUBLIC :: ROUTING_CALC
        PROCEDURE,PASS(SEFT), PUBLIC :: GET_REACH_INFLOW
        PROCEDURE,PASS(SEFT), PUBLIC :: GET_RESERVOIR_INFLOW
        PROCEDURE,PASS(SEFT), PUBLIC :: SHOW_INFORMATION
        PROCEDURE,PASS(SEFT), PUBLIC :: BSRESET_MEMORIES


      END TYPE BASIN_TYPE

      INTERFACE BASIN_TYPE
        MODULE PROCEDURE :: BASIN_TYPE_CONSTRUCTOR
      END INTERFACE BASIN_TYPE

      CONTAINS

        !Constructor
        PURE ELEMENTAL TYPE(BASIN_TYPE) FUNCTION BASIN_TYPE_CONSTRUCTOR(NAME, NSUB, NSRC, NGT, NRCH, NRES)
        IMPLICIT NONE
        CHARACTER(*), INTENT(IN) :: NAME
        INTEGER, INTENT(IN) :: NSUB, NSRC, NGT, NRCH, NRES

        BASIN_TYPE_CONSTRUCTOR%NAME = TRIM(NAME)
        BASIN_TYPE_CONSTRUCTOR%NSUBBASIN = NSUB
        BASIN_TYPE_CONSTRUCTOR%NSOURCE = NSRC
        BASIN_TYPE_CONSTRUCTOR%NREACH = NRCH
        BASIN_TYPE_CONSTRUCTOR%NRESERVOIR = NRES
        BASIN_TYPE_CONSTRUCTOR%NGATE = NGT

        END FUNCTION BASIN_TYPE_CONSTRUCTOR


        SUBROUTINE BSALLOCATING(SEFT)

        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        INTEGER :: J

        DO J = 1, SEFT%NSUBBASIN

            CALL SEFT%SUBBASIN(J)%SBSALLOCATING

        ENDDO

        DO J = 1, SEFT%NREACH

            CALL SEFT%REACH(J)%RCHALLOCATING

        ENDDO

        DO J = 1, SEFT%NRESERVOIR

            CALL SEFT%RESERVOIR(J)%RESALLOCATING

        ENDDO

        END SUBROUTINE BSALLOCATING


        SUBROUTINE SHOW_INFORMATION(SEFT)
        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        !@TODO


        END SUBROUTINE SHOW_INFORMATION


        SUBROUTINE BSRESET_MEMORIES(SEFT)
        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        INTEGER :: J

        DO J = 1, SEFT%NSUBBASIN

            CALL SEFT%SUBBASIN(J)%SBSRESET_MEMORIES

        ENDDO

        DO J = 1, SEFT%NREACH

            CALL SEFT%REACH(J)%RCHRESET_MEMORIES

        ENDDO

        DO J = 1, SEFT%NRESERVOIR

            CALL SEFT%RESERVOIR(J)%RESRESET_MEMORIES

        ENDDO

        END SUBROUTINE BSRESET_MEMORIES


        INCLUDE "RUN_OFF_CALC.f"
        INCLUDE "BASIN_GET_INFLOW.f"
        INCLUDE "ROUTING.f"
        INCLUDE "SET_BASIN_LEVEL.f"

      END MODULE BASIN_MOD
