      MODULE BASIN_MOD
      USE datetime_module
      USE GATE_MOD
      USE SUBBASIN_MOD
      USE REACH_MOD
      USE RESERVOIR_MOD
      USE SOURCE_MOD
      IMPLICIT NONE

      PUBLIC :: BASIN_TYPE

      TYPE BASIN_TYPE

        !basin name
        CHARACTER(100) :: NAME
        !max level of basin objects
        INTEGER :: MAX_LEVEL = 0
        !Number of objects
        INTEGER :: NSUBBASIN, NREACH, NRESERVOIR, NSOURCE, NPRECIP, NGATE
        !Object data
        TYPE(SUBBASIN_TYPE), POINTER, DIMENSION(:) :: SUBBASIN
        TYPE(REACH_TYPE), POINTER, DIMENSION(:) :: REACH
        TYPE(RESERVOIR_TYPE), POINTER, DIMENSION(:) :: RESERVOIR
        TYPE(SOURCE_TYPE), POINTER, DIMENSION(:) :: SOURCE
        TYPE(GATE_TYPE), POINTER, DIMENSION(:) :: GATE

        CONTAINS

        PROCEDURE,PASS(SEFT), PUBLIC :: SET_OBJECTS_LEVEL
        PROCEDURE,PASS(SEFT), PRIVATE :: FIND_LEVEL
        PROCEDURE,PASS(SEFT), PUBLIC :: BSALLOCATING


      END TYPE BASIN_TYPE

      INTERFACE BASIN_TYPE
        MODULE PROCEDURE :: BASIN_TYPE_CONSTRUCTOR
      END INTERFACE BASIN_TYPE

      CONTAINS

        !Constructor
        PURE ELEMENTAL TYPE(BASIN_TYPE) FUNCTION BASIN_TYPE_CONSTRUCTOR(NAME, NSUB, NSRC, NGT, NRCH, NRES)
        IMPLICIT NONE
        CHARACTER(*), INTENT(IN) :: NAME
        INTEGER, INTENT(IN) :: NSUB, NSRC, NGT, NRCH, NRES

        BASIN_TYPE_CONSTRUCTOR%NAME = TRIM(NAME)
        BASIN_TYPE_CONSTRUCTOR%NSUBBASIN = NSUB
        BASIN_TYPE_CONSTRUCTOR%NSOURCE = NSRC
        BASIN_TYPE_CONSTRUCTOR%NREACH = NRCH
        BASIN_TYPE_CONSTRUCTOR%NRESERVOIR = NRES
        BASIN_TYPE_CONSTRUCTOR%NGATE = NGT

        END FUNCTION BASIN_TYPE_CONSTRUCTOR

        ! set level for all basin objects to obtain basin connectivity
        SUBROUTINE SET_OBJECTS_LEVEL(SEFT)

        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        INTEGER :: J
        TYPE(REACH_TYPE), POINTER :: RCH
        TYPE(RESERVOIR_TYPE), POINTER :: RES

        SEFT%MAX_LEVEL = 0

        DO J = 1, SEFT%NREACH

            RCH => SEFT%REACH(J)

            RCH%LEVEL = RCH%LEVEL + SEFT%FIND_LEVEL(RCH%DOWNSTREAM)
            SEFT%MAX_LEVEL = MAX(SEFT%MAX_LEVEL, RCH%LEVEL)

        ENDDO

        DO J = 1, SEFT%NRESERVOIR

            RES => SEFT%RESERVOIR(J)

            RES%LEVEL = RES%LEVEL + SEFT%FIND_LEVEL(RES%DOWNSTREAM)
            SEFT%MAX_LEVEL = MAX(SEFT%MAX_LEVEL, RES%LEVEL)

        ENDDO

        RETURN
        END SUBROUTINE SET_OBJECTS_LEVEL


        !find level of an object
        RECURSIVE FUNCTION FIND_LEVEL(SEFT,DOWNSTREAM) RESULT(LEVEL)

        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        CHARACTER(*), INTENT(IN) :: DOWNSTREAM
        INTEGER :: LEVEL, J
        TYPE(REACH_TYPE), POINTER :: RCH
        TYPE(RESERVOIR_TYPE), POINTER :: RES


        IF(TRIM(DOWNSTREAM).EQ."") THEN

            LEVEL = 0
            RETURN

        ELSE

            LEVEL = 1

            DO J = 1, SEFT%NREACH

                RCH => SEFT%REACH(J)
                IF(TRIM(DOWNSTREAM).EQ.TRIM(RCH%NAME)) THEN

                    LEVEL = LEVEL + SEFT%FIND_LEVEL(RCH%DOWNSTREAM)
                    RETURN

                ENDIF

            ENDDO

            DO J = 1, SEFT%NRESERVOIR

                RES => SEFT%RESERVOIR(J)
                IF(TRIM(DOWNSTREAM).EQ.TRIM(RES%NAME)) THEN

                    LEVEL = LEVEL + SEFT%FIND_LEVEL(RES%DOWNSTREAM)
                    RETURN

                ENDIF

            ENDDO

        ENDIF

        RETURN
        END FUNCTION FIND_LEVEL


        SUBROUTINE BSALLOCATING(SEFT)

        CLASS(BASIN_TYPE), INTENT(INOUT) :: SEFT
        TYPE(REACH_TYPE), POINTER :: RCH
        TYPE(RESERVOIR_TYPE), POINTER :: RES
        TYPE(SUBBASIN_TYPE), POINTER :: SBS
        INTEGER :: J

        DO J = 1, SEFT%NSUBBASIN

            SBS => SEFT%SUBBASIN(J)
            CALL SBS%SBSALLOCATING

        ENDDO

        DO J = 1, SEFT%NREACH

            RCH => SEFT%REACH(J)
            CALL RCH%RCHALLOCATING

        ENDDO

        DO J = 1, SEFT%NRESERVOIR

            RES => SEFT%RESERVOIR(J)
            CALL RES%RESALLOCATING

        ENDDO

        END SUBROUTINE BSALLOCATING

      END MODULE BASIN_MOD
